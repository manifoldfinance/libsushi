{"version":3,"file":"index.js","sources":["../src/core/ChainId.ts","../src/core/actions.ts","../src/core/privateTransaction.ts","../src/core/isTransactionState.ts","../src/core/reducer.ts","../src/jsonrpc/index.ts","../src/values/AddressBurn.ts","../src/values/AddressZero.ts","../src/values/EIP191.ts","../src/values/AddressDead.ts","../src/errors/rpc.ts","../src/errors/transaction.ts"],"sourcesContent":["/** @export ChainId */\nexport enum ChainId {\n  MAINNET = '1',\n}\n","/**\n * @filename Redux Action\n * @version 0.2.0\n */\nimport { createAction } from '@reduxjs/toolkit';\nimport { PrivateTxState, PrivateTxStatus } from './privateTransaction';\nimport { ChainId } from './ChainId';\n\n/**\n * @export\n * @interface SerializableTransactionReceipt\n */\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  claim?: { recipient: string };\n  summary?: string;\n}>('transactions/addTransaction');\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\nexport const updatePrivateTxStatus = createAction<{\n  chainId: ChainId;\n  hash: string;\n  status: PrivateTxStatus;\n}>('transactions/updatePrivateTxStatus');\n\n/**\n * @export\n * @interface TransactionDetails\n */\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  claim?: { recipient: string };\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n  privateTx?: {\n    state: PrivateTxState;\n    status?: PrivateTxStatus;\n  };\n}\n","import { JsonRpcResponse } from '../jsonrpc';\n\n/**\n *   @enum PrivateTxState\n  *  @interface PrivateTxStatus\n  *  @interface RelayResponse\n  *  @description Transaction State Types\n *\n * - UNCHECKED -> Tx status has not been checked and there's no information about it.\n * - PROCESSING -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n * - OK -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n * - INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n * - ERROR -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n *\n/**\n * \n *\n * @export\n * @enum {number}\n */\nexport enum PrivateTxState {\n  UNCHECKED = 'UNCHECKED',\n  PROCESSING = 'PROCESSING',\n  OK = 'OK',\n  INDETERMINATE = 'INDETERMINATE',\n  ERROR = 'ERROR',\n}\n\n/** @type RelayResponses  */\nexport type RelayResponses = Record<string, RelayResponse>;\n\n/**\n *\n * @export\n * @interface RelayResponse\n */\nexport interface RelayResponse {\n  response: JsonRpcResponse<any>;\n  error?: string;\n}\n\n/**\n *\n * @export\n * @interface PrivateTxStatus\n */\nexport interface PrivateTxStatus {\n  transactionHash: string;\n  receivedAt: string;\n  relayedAt?: string;\n  minedAt?: string;\n  relayFailure?: boolean;\n  relayResponses?: RelayResponses;\n}\n/**\n *\n *\n * @export\n * @param {*} privateTx\n * @return {*}\n */\nexport function privateTx(privateTx: any): any {\n  throw new Error('[#sushiguard]: Function Error.');\n}\n","/**\n *\n * @class PrivateTransaction\n * @license GPL-3.0-Only\n * @see {@link https://docs.manifoldfinance.com}\n * @since 2022.03\n * @version 0.1.0\n *\n */\n\nimport { PrivateTxState } from './privateTransaction';\nimport { TransactionDetails } from './reducer';\n\n/**\n * @summary\n * Basic explanation of the tx state types:\n * UNCHECKED -> Tx status has not been checked and there's no information about it.\n * PROCESSING -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n * OK -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n * INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n * ERROR -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n */\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxPending(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return !tx?.receipt;\n  return tx?.privateTx?.state === PrivateTxState.UNCHECKED || tx?.privateTx?.state === PrivateTxState.PROCESSING;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxSuccessful(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return !!tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined');\n  return (\n    tx?.privateTx?.state === PrivateTxState.OK &&\n    !!tx &&\n    (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n  );\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxIndeterminate(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return false;\n  return tx?.privateTx?.state === PrivateTxState.INDETERMINATE;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {number}\n */\nexport function txMinutesPending(tx?: TransactionDetails): number {\n  if (!tx) return 0;\n  return (new Date().getTime() - tx.addedTime) / 1000 / 60;\n}\n\n/**\n *\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxExpired(tx?: TransactionDetails): boolean {\n  if (!tx) return false;\n  return txMinutesPending(tx) > 60;\n}\n","/**\n *\n * @filename Redux Reducer\n *\n */\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport { ChainId } from './ChainId';\nimport { PrivateTxState, PrivateTxStatus } from './privateTransaction';\nimport { txMinutesPending } from './transaction';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  updatePrivateTxStatus,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  claim?: { recipient: string };\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n  privateTx?: {\n    state: PrivateTxState;\n    status?: PrivateTxStatus;\n  };\n}\n\ntype txHash = string;\n\nexport type TransactionState = { [key in ChainId]?: Record<txHash, TransactionDetails> };\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      // @ts-expect-error\n      (transactions, { payload: { chainId, from, hash, approval, summary, claim, privateTx = false } }) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = {\n          hash,\n          approval,\n          summary,\n          claim,\n          from,\n          addedTime: now(),\n          ...(privateTx ? { privateTx: { state: PrivateTxState.UNCHECKED, status: undefined } } : {}),\n        };\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    })\n    .addCase(updatePrivateTxStatus, (transactions, { payload: { chainId, hash, status } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) return;\n      if (!tx.privateTx) throw new Error('Invalid update private tx call to a non private tx');\n\n      const prevState = tx.privateTx?.state;\n      const prevStatus = tx.privateTx?.status;\n      const minutesElapsed = txMinutesPending(tx);\n\n      // If previous state was a definitive one, we skip processing new events\n      if (\n        prevState &&\n        (prevState === PrivateTxState.ERROR ||\n          prevState === PrivateTxState.INDETERMINATE ||\n          prevState === PrivateTxState.OK)\n      )\n        return;\n\n      // derive new private tx state from latest received status\n      let state = PrivateTxState.PROCESSING;\n\n      // OK - Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n      if (status.receivedAt && status.relayedAt && !status.relayFailure && status.minedAt) state = PrivateTxState.OK;\n\n      // ERROR\n      if (\n        status.receivedAt &&\n        status.relayFailure &&\n        status.relayResponses &&\n        Object.values(status.relayResponses).reduceRight((prev, current) => {\n          if (prev) return prev;\n          if (current.error || current.response.error) return true;\n          return false;\n        }, false)\n      )\n        state = PrivateTxState.ERROR;\n\n      // INDETERMINATE\n      if (status.receivedAt && status.relayedAt && status.relayFailure && status.minedAt)\n        state = PrivateTxState.INDETERMINATE;\n\n      // If more than 20 minutes has passed, better to mark this TX as indeterminate\n      if (minutesElapsed > 3) state = PrivateTxState.INDETERMINATE;\n\n      // update new state\n      tx.privateTx.state = state ?? PrivateTxState.UNCHECKED;\n      tx.privateTx.status = status;\n    }),\n);\n","/**\n * @file JsonRpc\n * @version 0.3.0\n * @license Apache-2.0\n *\n */\n\n/**\n * JsonRpcRequest\n * @export\n * @interface JsonRpcRequest\n */\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number | string | null;\n  method: string;\n  params?: unknown[] | unknown;\n}\n\n/**\n * @export\n * @interface JsonRpcError\n */\nexport interface JsonRpcError {\n  code: number;\n  message: string;\n  data?: unknown;\n}\n\n/**\n * @export\n * @interface JsonRpcResponse\n * @template T\n */\nexport interface JsonRpcResponse<T> {\n  jsonrpc: '2.0';\n  id?: number | string | null;\n  result?: T;\n  error?: JsonRpcError;\n}\n\n/**\n * @export\n * @interface JsonRpcPayload\n */\nexport interface JsonRpcPayload {\n  jsonrpc: string;\n  method: string;\n  params?: any[];\n  id?: string | number;\n}\n\n/**\n * @export\n * @class HttpJsonRpcError\n * @extends {Error}\n */\nexport class HttpJsonRpcError extends Error {\n  constructor(message: string, public req?: JsonRpcRequest, public res?: Response) {\n    super(message);\n  }\n}\n\n/**\n * @export\n * @template T\n * @param {string} url\n * @param {Partial<JsonRpcRequest>} {\n * @return {(Promise<JsonRpcResponse<JsonRpcError | T>>)}\n */\nexport function fetchJsonRpc<T>(\n  url: string,\n  { jsonrpc = '2.0', id = new Date().getTime(), method = '', params = [] }: Partial<JsonRpcRequest>,\n): Promise<JsonRpcResponse<JsonRpcError | T>> {\n  return fetch(url, {\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST',\n    body: JSON.stringify({ jsonrpc, id, method, params }),\n  }).then((res: Response) => {\n    // handle http errors (anything not 200)\n    if (res.status !== 200) throw new HttpJsonRpcError(res.statusText, { jsonrpc, id, method, params }, res);\n\n    // handle successful response\n    return res.json();\n    console.log(res.json);\n  });\n}\n\nexport type JsonRpcMethod =\n  | 'eth_accounts'\n  | 'eth_blockNumber'\n  | 'eth_call'\n  | 'eth_chainId'\n  | 'eth_coinbase'\n  | 'eth_estimateGas'\n  | 'eth_gasPrice'\n  | 'eth_getBalance'\n  | 'eth_getBlockByHash'\n  | 'eth_getBlockByNumber'\n  | 'eth_getBlockTransactionCountByHash'\n  | 'eth_getBlockTransactionCountByNumber'\n  | 'eth_getCode'\n  | 'eth_getLogs'\n  | 'eth_getProof'\n  | 'eth_getStorageAt'\n  | 'eth_getTransactionByBlockHashAndIndex'\n  | 'eth_getTransactionByBlockNumberAndIndex'\n  | 'eth_getTransactionByHash'\n  | 'eth_getTransactionCount'\n  | 'eth_getTransactionReceipt'\n  | 'eth_getUncleByBlockHashAndIndex'\n  | 'eth_getUncleByBlockNumberAndIndex'\n  | 'eth_getUncleCountByBlockHash'\n  | 'eth_getUncleCountByBlockNumber'\n  | 'eth_protocolVersion'\n  | 'eth_sendRawTransaction'\n  | 'eth_sendTransaction'\n  | 'eth_sign'\n  | 'eth_signTransaction'\n  | 'eth_signTypedData'\n  | 'eth_syncing';\nexport interface IJsonRpcRequest<TMethod extends JsonRpcMethod, TParams extends Array<unknown>> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly method: TMethod;\n  readonly params: TParams;\n}\nexport interface IJsonRpcSuccess<TResult> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly result: TResult;\n}\nexport interface IJsonRpcError {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly error: {\n    readonly code: number;\n    readonly message: string;\n    readonly data?: unknown;\n  };\n}\nexport type IJsonRpcResponse<T> = IJsonRpcSuccess<T> | IJsonRpcError;\nexport function validateJsonRpcResponse<T>(response: any): response is IJsonRpcResponse<T> {\n  if (\n    response.jsonrpc !== '2.0' ||\n    (typeof response.id !== 'string' && typeof response.id !== 'number' && response.id !== null) ||\n    ('result' in response && 'error' in response) ||\n    (!('result' in response) && !('error' in response)) ||\n    (response.error && typeof response.error.code !== 'number') ||\n    (response.error && typeof response.error.message !== 'string')\n  )\n    throw new Error(`Expected JSON-RPC response, received something else.\\n${JSON.stringify(response)}`);\n  return true;\n}\nexport function isJsonRpcSuccess<T>(response: IJsonRpcResponse<T>): response is IJsonRpcSuccess<T> {\n  return !!(response as IJsonRpcSuccess<T>).result && !(response as IJsonRpcError).error;\n}\nexport function isJsonRpcError<T>(response: IJsonRpcResponse<T>): response is IJsonRpcError {\n  return !!(response as IJsonRpcError).error && !(response as IJsonRpcSuccess<T>).result;\n}\n","export const BURN_ADDRESS = 0x000000000000000000000000000000000000dead;\n","export const AddressZero = '0x0000000000000000000000000000000000000000';\n","export const EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = '\\x19\\x01';\n","// @note this is also the old OVM_ETH address on Optimism \nexport const DeadAddress = '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000';\n","/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nexport class RpcError<T = undefined> extends Error {\n  readonly code: number\n  readonly data?: T\n  readonly internal?: unknown\n  constructor(\n    /** Number error code */\n    code: number,\n    /** Human-readable string */\n    message: string,\n    /** Low-level error */\n    internal?: unknown,\n    /** Other useful information about error */\n    data?: T,\n  ) {\n    if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.')\n    if (!message || typeof message !== 'string')\n      throw new Error('\"message\" must be a nonempty string.')\n    super(message)\n    this.code = code\n    this.data = data\n    this.internal = internal\n  }\n}\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nexport class ProviderRpcError<T = undefined> extends RpcError<T> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(\n    /**\n     * Number error code\n     * @see https://eips.ethereum.org/EIPS/eip-1193#error-standards\n     */\n    code: 4001 | 4100 | 4200 | 4900 | 4901 | 4902,\n    /** Human-readable string */\n    message: string,\n    /** Low-level error */\n    internal?: unknown,\n    /** Other useful information about error */\n    data?: T,\n  ) {\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999))\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      )\n    super(code, message, internal, data)\n  }\n}\nexport class AddChainError extends Error {\n  name = 'AddChainError'\n  message = 'Error adding chain'\n}\nexport class ChainNotConfiguredError extends Error {\n  name = 'ChainNotConfigured'\n  message = 'Chain not configured'\n}\nexport class ConnectorAlreadyConnectedError extends Error {\n  name = 'ConnectorAlreadyConnectedError'\n  message = 'Connector already connected'\n}\nexport class ConnectorNotFoundError extends Error {\n  name = 'ConnectorNotFoundError'\n  message = 'Connector not found'\n}\nexport class SwitchChainError extends ProviderRpcError {\n  name = 'SwitchChainError'\n  constructor(error: unknown) {\n    super(4902, 'Error switching chain', error)\n  }\n}\nexport class SwitchChainNotSupportedError extends Error {\n  name = 'SwitchChainNotSupportedError'\n  message = 'Switch chain not supported by connector'\n}\nexport class UserRejectedRequestError extends ProviderRpcError {\n  name = 'UserRejectedRequestError'\n  constructor(error: unknown) {\n    super(4001, 'User rejected request', error)\n  }\n}\n\nexport class ResourceUnavailableError extends RpcError {\n  name = 'ResourceUnavailable'\n\n  constructor(error: unknown) {\n    super(-32002, 'Resource unavailable', error)\n  }\n}\n","import { Provider, TransactionReceipt } from '@ethersproject/providers';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { toUtf8String } from '@ethersproject/strings';\n\nexport const getTransactionError = async (\n  tx: TransactionResponse,\n  receipt: TransactionReceipt,\n  provider: Provider,\n): Promise<string> => {\n  if (typeof tx !== 'object') {\n    throw TypeError(`tx argument ${tx} must be a transaction object`);\n  }\n  if (typeof receipt !== 'object') {\n    throw TypeError(\n      `receipt argument ${receipt} must be a transaction receipt object`,\n    );\n  }\n  if (receipt.status) {\n    throw TypeError(\n      'Transaction did not fail. Can only read the revert reason from failed transactions',\n    );\n  }\n  if (!receipt.transactionHash) {\n    throw TypeError(`There is no transaction hash on the receipt object`);\n  }\n  if (receipt.gasUsed === tx.gasLimit) {\n    throw Error('Transaction failed as it ran out of gas.');\n  }\n\n  let rawMessageData;\n  try {\n    const result = await provider.call(\n      {\n        ...tx,\n      },\n      receipt.blockNumber,\n    );\n\n    // Trim the 0x prefix\n    rawMessageData = result.slice(2);\n  } catch (e) {\n    if (e.message.startsWith('Node error: ')) {\n      // Trim \"Node error: \"\n      const errorObjectStr = e.message.slice(12);\n      // Parse the error object\n      const errorObject = JSON.parse(errorObjectStr);\n\n      if (!errorObject.data) {\n        throw Error(\n          'Failed to parse data field error object:' + errorObjectStr,\n        );\n      }\n\n      if (errorObject.data.startsWith('Reverted 0x')) {\n        // Trim \"Reverted 0x\" from the data field\n        rawMessageData = errorObject.data.slice(11);\n      } else if (errorObject.data.startsWith('0x')) {\n        // Trim \"0x\" from the data field\n        rawMessageData = errorObject.data.slice(2);\n      } else {\n        throw Error(\n          'Failed to parse data field of error object:' + errorObjectStr,\n        );\n      }\n    } else {\n      throw Error(\n        'Failed to parse error message from Ethereum call: ' + e.message,\n      );\n    }\n  }\n\n  return parseReasonCode(rawMessageData);\n};\n\nexport const parseReasonCode = (messageData: string): string => {\n  // Get the length of the revert reason\n  const strLen = parseInt(messageData.slice(8 + 64, 8 + 128), 16);\n  // Using the length and known offset, extract and convert the revert reason\n  const reasonCodeHex = messageData.slice(8 + 128, 8 + 128 + strLen * 2);\n  // Convert reason from hex to string\n  const reason = toUtf8String('0x' + reasonCodeHex);\n\n  return reason;\n};\n"],"names":["createAction","createReducer","toUtf8String"],"mappings":";;;;;;;AAAU,IAAC,OAAO,mBAAmB,CAAC,CAAC,QAAQ,KAAK;AACpD,EAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;AAC5B,EAAE,OAAO,QAAQ,CAAC;AAClB,CAAC,EAAE,OAAO,IAAI,EAAE;;ACFJ,MAAC,cAAc,GAAGA,oBAAY,CAAC,6BAA6B,EAAE;AAC9D,MAAC,oBAAoB,GAAGA,oBAAY,CAAC,mCAAmC,EAAE;AAC1E,MAAC,mBAAmB,GAAGA,oBAAY,CAAC,kCAAkC,EAAE;AACxE,MAAC,kBAAkB,GAAGA,oBAAY,CAAC,iCAAiC,EAAE;AACtE,MAAC,qBAAqB,GAAGA,oBAAY,CAAC,oCAAoC;;ACL5E,IAAC,cAAc,mBAAmB,CAAC,CAAC,eAAe,KAAK;AAClE,EAAE,eAAe,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAC7C,EAAE,eAAe,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;AAC/C,EAAE,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AAC/B,EAAE,eAAe,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC;AACrD,EAAE,eAAe,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AACrC,EAAE,OAAO,eAAe,CAAC;AACzB,CAAC,EAAE,cAAc,IAAI,EAAE,EAAE;AAClB,SAAS,SAAS,CAAC,UAAU,EAAE;AACtC,EAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACpD;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,SAAS,WAAW,CAAC,EAAE,EAAE;AAChC,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS;AACpB,IAAI,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC;AACxB,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,KAAK,cAAc,CAAC,SAAS,IAAI,EAAE,EAAE,SAAS,EAAE,KAAK,KAAK,cAAc,CAAC,UAAU,CAAC;AACjH,CAAC;AACM,SAAS,cAAc,CAAC,EAAE,EAAE;AACnC,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS;AACpB,IAAI,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,WAAW,CAAC,CAAC;AAC3F,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,KAAK,cAAc,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,WAAW,CAAC,CAAC;AACvI,CAAC;AACM,SAAS,iBAAiB,CAAC,EAAE,EAAE;AACtC,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS;AACpB,IAAI,OAAO,KAAK,CAAC;AACjB,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,KAAK,cAAc,CAAC,aAAa,CAAC;AAC/D,CAAC;AACM,SAAS,gBAAgB,CAAC,EAAE,EAAE;AACrC,EAAE,IAAI,CAAC,EAAE;AACT,IAAI,OAAO,CAAC,CAAC;AACb,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,IAAI,GAAG,GAAG,EAAE,CAAC;AAC1D,CAAC;AACM,SAAS,WAAW,CAAC,EAAE,EAAE;AAChC,EAAE,IAAI,CAAC,EAAE;AACT,IAAI,OAAO,KAAK,CAAC;AACjB,EAAE,OAAO,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;AACnC;;ACxBA,MAAM,GAAG,GAAG,MAAM,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AAChC,MAAM,YAAY,GAAG,EAAE,CAAC;AAC/B,cAAeC,qBAAa,CAAC,YAAY,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,GAAG,KAAK,EAAE,EAAE,KAAK;AAC7L,EAAE,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,EAAE;AACrC,IAAI,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAC;AAC1D,GAAG;AACH,EAAE,MAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AAC1C,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG;AACd,IAAI,IAAI;AACR,IAAI,QAAQ;AACZ,IAAI,OAAO;AACX,IAAI,KAAK;AACT,IAAI,IAAI;AACR,IAAI,SAAS,EAAE,GAAG,EAAE;AACpB,IAAI,GAAG,SAAS,GAAG,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,EAAE,GAAG,EAAE;AAC1F,GAAG,CAAC;AACJ,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;AAC9B,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;AAC7E,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;AAC5B,IAAI,OAAO;AACX,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;AAC7B,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,KAAK;AAC9F,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;AAC3C,EAAE,IAAI,CAAC,EAAE,EAAE;AACX,IAAI,OAAO;AACX,GAAG;AACH,EAAE,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE;AAClC,IAAI,EAAE,CAAC,sBAAsB,GAAG,WAAW,CAAC;AAC5C,GAAG,MAAM;AACT,IAAI,EAAE,CAAC,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,sBAAsB,CAAC,CAAC;AACjF,GAAG;AACH,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,KAAK;AAC3F,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;AAC3C,EAAE,IAAI,CAAC,EAAE,EAAE;AACX,IAAI,OAAO;AACX,GAAG;AACH,EAAE,EAAE,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,EAAE,EAAE,CAAC,aAAa,GAAG,GAAG,EAAE,CAAC;AAC3B,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK;AAC5F,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;AAC3C,EAAE,IAAI,CAAC,EAAE;AACT,IAAI,OAAO;AACX,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS;AACnB,IAAI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AAC1E,EAAE,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;AACxC,EAAqB,EAAE,CAAC,SAAS,EAAE,OAAO;AAC1C,EAAE,MAAM,cAAc,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;AAC9C,EAAE,IAAI,SAAS,KAAK,SAAS,KAAK,cAAc,CAAC,KAAK,IAAI,SAAS,KAAK,cAAc,CAAC,aAAa,IAAI,SAAS,KAAK,cAAc,CAAC,EAAE,CAAC;AACxI,IAAI,OAAO;AACX,EAAE,IAAI,KAAK,GAAG,cAAc,CAAC,UAAU,CAAC;AACxC,EAAE,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,OAAO;AACrF,IAAI,KAAK,GAAG,cAAc,CAAC,EAAE,CAAC;AAC9B,EAAE,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,OAAO,KAAK;AAC/I,IAAI,IAAI,IAAI;AACZ,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK;AAC/C,MAAM,OAAO,IAAI,CAAC;AAClB,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG,EAAE,KAAK,CAAC;AACX,IAAI,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;AACjC,EAAE,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,OAAO;AACpF,IAAI,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC;AACzC,EAAE,IAAI,cAAc,GAAG,CAAC;AACxB,IAAI,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC;AACzC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,IAAI,cAAc,CAAC,SAAS,CAAC;AACzD,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;AAC/B,CAAC,CAAC,CAAC;;;;;;;;AC5EH;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,gBAAgB,SAAS,KAAK,CAAC;AAC5C,EAAE,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE;AACjC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AACnB,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB,GAAG;AACH,CAAC;AACM,SAAS,YAAY,CAAC,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,EAAE,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,EAAE;AAC5G,EAAE,OAAO,KAAK,CAAC,GAAG,EAAE;AACpB,IAAI,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;AACnD,IAAI,MAAM,EAAE,MAAM;AAClB,IAAI,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;AACzD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK;AACnB,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG;AAC1B,MAAM,MAAM,IAAI,gBAAgB,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;AACvF,IAAI,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AAEtB,GAAG,CAAC,CAAC;AACL,CAAC;AACM,SAAS,uBAAuB,CAAC,QAAQ,EAAE;AAClD,EAAE,IAAI,QAAQ,CAAC,OAAO,KAAK,KAAK,IAAI,OAAO,QAAQ,CAAC,EAAE,KAAK,QAAQ,IAAI,OAAO,QAAQ,CAAC,EAAE,KAAK,QAAQ,IAAI,QAAQ,CAAC,EAAE,KAAK,IAAI,IAAI,QAAQ,IAAI,QAAQ,IAAI,OAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,QAAQ,CAAC,IAAI,QAAQ,CAAC,KAAK,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,CAAC,KAAK,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ;AAC/V,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC;AACrB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACM,SAAS,gBAAgB,CAAC,QAAQ,EAAE;AAC3C,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC9C,CAAC;AACM,SAAS,cAAc,CAAC,QAAQ,EAAE;AACzC,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC9C;;ACpCY,MAAC,YAAY,GAAG;;ACAhB,MAAC,WAAW,GAAG;;ACAf,MAAC,wCAAwC,GAAG;;ACA5C,MAAC,WAAW,GAAG;;ACApB,MAAM,QAAQ,SAAS,KAAK,CAAC;AACpC,EAAE,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC7C,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;AAC/B,MAAM,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;AACpD,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ;AAC/C,MAAM,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC9D,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AACnB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,GAAG;AACH,CAAC;AACM,MAAM,gBAAgB,SAAS,QAAQ,CAAC;AAC/C,EAAE,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC7C,IAAI,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC;AAChE,MAAM,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;AACnF,IAAI,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzC,GAAG;AACH,CAAC;AACM,MAAM,aAAa,SAAS,KAAK,CAAC;AACzC,EAAE,WAAW,GAAG;AAChB,IAAI,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;AAChC,IAAI,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC;AACxC,GAAG;AACH,CAAC;AACM,MAAM,uBAAuB,SAAS,KAAK,CAAC;AACnD,EAAE,WAAW,GAAG;AAChB,IAAI,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC;AACrC,IAAI,IAAI,CAAC,OAAO,GAAG,sBAAsB,CAAC;AAC1C,GAAG;AACH,CAAC;AACM,MAAM,8BAA8B,SAAS,KAAK,CAAC;AAC1D,EAAE,WAAW,GAAG;AAChB,IAAI,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,IAAI,GAAG,gCAAgC,CAAC;AACjD,IAAI,IAAI,CAAC,OAAO,GAAG,6BAA6B,CAAC;AACjD,GAAG;AACH,CAAC;AACM,MAAM,sBAAsB,SAAS,KAAK,CAAC;AAClD,EAAE,WAAW,GAAG;AAChB,IAAI,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,IAAI,GAAG,wBAAwB,CAAC;AACzC,IAAI,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC;AACzC,GAAG;AACH,CAAC;AACM,MAAM,gBAAgB,SAAS,gBAAgB,CAAC;AACvD,EAAE,WAAW,CAAC,KAAK,EAAE;AACrB,IAAI,KAAK,CAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;AACnC,GAAG;AACH,CAAC;AACM,MAAM,4BAA4B,SAAS,KAAK,CAAC;AACxD,EAAE,WAAW,GAAG;AAChB,IAAI,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACxB,IAAI,IAAI,CAAC,IAAI,GAAG,8BAA8B,CAAC;AAC/C,IAAI,IAAI,CAAC,OAAO,GAAG,yCAAyC,CAAC;AAC7D,GAAG;AACH,CAAC;AACM,MAAM,wBAAwB,SAAS,gBAAgB,CAAC;AAC/D,EAAE,WAAW,CAAC,KAAK,EAAE;AACrB,IAAI,KAAK,CAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC;AAC3C,GAAG;AACH,CAAC;AACM,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AACvD,EAAE,WAAW,CAAC,KAAK,EAAE;AACrB,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC;AACjD,IAAI,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;AACtC,GAAG;AACH;;ACtEY,MAAC,mBAAmB,GAAG,OAAO,EAAE,EAAE,OAAO,EAAE,QAAQ,KAAK;AACpE,EAAE,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;AAC9B,IAAI,MAAM,SAAS,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,6BAA6B,CAAC,CAAC,CAAC;AACtE,GAAG;AACH,EAAE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACnC,IAAI,MAAM,SAAS,CAAC,CAAC,iBAAiB,EAAE,OAAO,CAAC,qCAAqC,CAAC,CAAC,CAAC;AACxF,GAAG;AACH,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE;AACtB,IAAI,MAAM,SAAS,CAAC,oFAAoF,CAAC,CAAC;AAC1G,GAAG;AACH,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;AAChC,IAAI,MAAM,SAAS,CAAC,CAAC,kDAAkD,CAAC,CAAC,CAAC;AAC1E,GAAG;AACH,EAAE,IAAI,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,QAAQ,EAAE;AACvC,IAAI,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAC;AAC5D,GAAG;AACH,EAAE,IAAI,cAAc,CAAC;AACrB,EAAE,IAAI;AACN,IAAI,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC;AACvC,MAAM,GAAG,EAAE;AACX,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;AAC5B,IAAI,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrC,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;AAC9C,MAAM,MAAM,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjD,MAAM,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACrD,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC7B,QAAQ,MAAM,KAAK,CAAC,0CAA0C,GAAG,cAAc,CAAC,CAAC;AACjF,OAAO;AACP,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;AACtD,QAAQ,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACpD,OAAO,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AACpD,QAAQ,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnD,OAAO,MAAM;AACb,QAAQ,MAAM,KAAK,CAAC,6CAA6C,GAAG,cAAc,CAAC,CAAC;AACpF,OAAO;AACP,KAAK,MAAM;AACX,MAAM,MAAM,KAAK,CAAC,oDAAoD,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;AACpF,KAAK;AACL,GAAG;AACH,EAAE,OAAO,eAAe,CAAC,cAAc,CAAC,CAAC;AACzC,EAAE;AACU,MAAC,eAAe,GAAG,CAAC,WAAW,KAAK;AAChD,EAAE,MAAM,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;AAClE,EAAE,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;AACzE,EAAE,MAAM,MAAM,GAAGC,oBAAY,CAAC,IAAI,GAAG,aAAa,CAAC,CAAC;AACpD,EAAE,OAAO,MAAM,CAAC;AAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}