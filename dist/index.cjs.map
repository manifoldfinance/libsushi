{"version":3,"file":"index.cjs","sources":["../src/core/ChainId.ts","../src/core/actions.ts","../src/core/privateTransaction.ts","../src/core/isTransactionState.ts","../src/core/reducer.ts","../src/jsonrpc/index.ts","../src/values/AddressBurn.ts","../src/values/AddressZero.ts","../src/values/EIP191.ts","../src/values/AddressDead.ts","../src/errors/rpc.ts","../src/errors/transaction.ts","../src/errors/stdErrors.ts"],"sourcesContent":["/**\n * @package OpenMev ChainId\n */\n\n/**\n* OPENMEV = '73300705280', // 0x1111100000\n*/\n\n/**\n* @enum ChainId\n*/\nexport enum ChainId {\n  MAINNET = '1',\n  GORELI = '5',\n}\n\nexport let OPENMEV_SUPPORTED_NETWORKS = [ChainId.MAINNET];\n\nexport enum OPENMEV_METAMASK_CHAIN_ID {\n  MAINNET = '0x1',\n}\n\nexport const OPENMEV_METAMASK_SUPPORTED_NETWORKS = [OPENMEV_METAMASK_CHAIN_ID.MAINNET];\n\nconst defaultRpcUrl = (network: string) => `https://api.sushirelay.com/v1`;\n\nexport const MAINNET_RPC_URL = defaultRpcUrl('mainnet');\n\nexport default ChainId;\n","/**\n * @filename Redux Action\n * @version 0.2.0\n */\nimport { createAction } from '@reduxjs/toolkit';\nimport { PrivateTxState, PrivateTxStatus } from './privateTransaction';\nimport { ChainId } from './ChainId';\n\n/**\n * @export\n * @interface SerializableTransactionReceipt\n */\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  claim?: { recipient: string };\n  summary?: string;\n}>('transactions/addTransaction');\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\nexport const updatePrivateTxStatus = createAction<{\n  chainId: ChainId;\n  hash: string;\n  status: PrivateTxStatus;\n}>('transactions/updatePrivateTxStatus');\n\n/**\n * @export\n * @interface TransactionDetails\n */\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  claim?: { recipient: string };\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n  privateTx?: {\n    state: PrivateTxState;\n    status?: PrivateTxStatus;\n  };\n}\n","import { JsonRpcResponse } from '../jsonrpc';\n\n/**\n *   @enum PrivateTxState\n  *  @interface PrivateTxStatus\n  *  @interface RelayResponse\n  *  @description Transaction State Types\n *\n * - UNCHECKED -> Tx status has not been checked and there's no information about it.\n * - PROCESSING -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n * - OK -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n * - INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n * - ERROR -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n *\n/**\n * \n *\n * @export\n * @enum {number}\n */\nexport enum PrivateTxState {\n  UNCHECKED = 'UNCHECKED',\n  PROCESSING = 'PROCESSING',\n  OK = 'OK',\n  INDETERMINATE = 'INDETERMINATE',\n  ERROR = 'ERROR',\n}\n\n/** @type RelayResponses  */\nexport type RelayResponses = Record<string, RelayResponse>;\n\n/**\n *\n * @export\n * @interface RelayResponse\n */\nexport interface RelayResponse {\n  response: JsonRpcResponse<any>;\n  error?: string;\n}\n\n/**\n *\n * @export\n * @interface PrivateTxStatus\n */\nexport interface PrivateTxStatus {\n  transactionHash: string;\n  receivedAt: string;\n  relayedAt?: string;\n  minedAt?: string;\n  relayFailure?: boolean;\n  relayResponses?: RelayResponses;\n}\n/**\n *\n *\n * @export\n * @param {*} privateTx\n * @return {*}\n */\nexport function privateTx(privateTx: any): any {\n  throw new Error('[#sushiguard]: Function Error.');\n}\n","/**\n *\n * @class PrivateTransaction\n * @license GPL-3.0-Only\n * @see {@link https://docs.manifoldfinance.com}\n * @since 2022.03\n * @latest 2022.06\n * @version 0.2.0\n *\n */\n\nimport { PrivateTxState } from './privateTransaction';\nimport { TransactionDetails } from './reducer';\n/**\n\n@NOTE Eth2 Changes Below\n\n```markdown\n| Block Tags |  Description  |\n|---|---|\n| earliest |  The lowest numbered block the client has available  |\n| finalized |  The most recent crypto-economically secure block  cannot be re-orged outside of manual intervention driven by community coordination |\n| safe |  The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions  |\n| unsafe |  The most recent block in the canonical chain observed by the client this block can be re-orged out of the canonical chain |\n| pending | DEPRECIATED  A sample next block built by the client on top of unsafe and containing the set of transactions usually taken from local mempool  |\n| latest |  DEPRECATED Currently an alias for unsafe will be removed at some point in the future |\n```\n*/\n\n/**\n * @export BlockSpecifier\n * @summary Specifies a block.  Can be given by number, or can be given via the \n *     special strings \"genesis\", \"latest\", or \"pending\".\n *\n * @warning Using `pending`, while allowed, is not advised, as it may lead\n * to internally inconsistent results.  Use of `latest` is safe and will not\n * lead to inconsistent results. Depending on the backing RPC networks caching system,\n * the usage of `pending` may lead to inconsistencies as a result of an \n * overly aggressive cache system. This may cause downstream errors/invalid states.\n *\n * @category Inputs\n */\nexport type BlockSpecifier = number | \"genesis\" | \"latest\" | \"pending\" | null;\n\n/** \n * @export \n * RegularizedBlockSpecifier \n */\nexport type RegularizedBlockSpecifier = number | \"pending\" | null;\n//  if (params == null) { return null; }\n\n/**\n *\n * Transaction State Type\n *\n * @summary\n *   Basic explanation of the tx state types:\n *\n *   UNCHECKED     -> Tx status has not been checked and there's no information about it.\n *   PROCESSING    -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n *   OK            -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n *   INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n *   ERROR         -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n *\n */\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxPending(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return !tx?.receipt;\n  return tx?.privateTx?.state === PrivateTxState.UNCHECKED || tx?.privateTx?.state === PrivateTxState.PROCESSING;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxSuccessful(tx?: TransactionDetails): boolean {\n  // FIXME, types return\n  if (!tx?.privateTx) return !!tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined');\n  return (\n    tx?.privateTx?.state === PrivateTxState.OK &&\n    !!tx &&\n    (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n  );\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxIndeterminate(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return false;\n  return tx?.privateTx?.state === PrivateTxState.INDETERMINATE;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {number}\n */\nexport function txMinutesPending(tx?: TransactionDetails): number {\n  if (!tx) return 0;\n  return (new Date().getTime() - tx.addedTime) / 1000 / 60;\n}\n\n/**\n *\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxExpired(tx?: TransactionDetails): boolean {\n  if (!tx) return false;\n  return txMinutesPending(tx) > 60;\n}\n\n\n\n","/**\n *\n * @filename Redux Reducer\n *\n */\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport { ChainId } from './ChainId';\nimport { PrivateTxState, PrivateTxStatus } from './privateTransaction';\nimport { txMinutesPending } from './transaction';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  updatePrivateTxStatus,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  claim?: { recipient: string };\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n  privateTx?: {\n    state: PrivateTxState;\n    status?: PrivateTxStatus;\n  };\n}\n\ntype txHash = string;\n\nexport type TransactionState = { [key in ChainId]?: Record<txHash, TransactionDetails> };\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      // @ts-expect-error\n      (transactions, { payload: { chainId, from, hash, approval, summary, claim, privateTx = false } }) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = {\n          hash,\n          approval,\n          summary,\n          claim,\n          from,\n          addedTime: now(),\n          ...(privateTx ? { privateTx: { state: PrivateTxState.UNCHECKED, status: undefined } } : {}),\n        };\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    })\n    .addCase(updatePrivateTxStatus, (transactions, { payload: { chainId, hash, status } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) return;\n      if (!tx.privateTx) throw new Error('Invalid update private tx call to a non private tx');\n\n      const prevState = tx.privateTx?.state;\n      const prevStatus = tx.privateTx?.status;\n      const minutesElapsed = txMinutesPending(tx);\n\n      // If previous state was a definitive one, we skip processing new events\n      if (\n        prevState &&\n        (prevState === PrivateTxState.ERROR ||\n          prevState === PrivateTxState.INDETERMINATE ||\n          prevState === PrivateTxState.OK)\n      )\n        return;\n\n      // derive new private tx state from latest received status\n      let state = PrivateTxState.PROCESSING;\n\n      // OK - Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n      if (status.receivedAt && status.relayedAt && !status.relayFailure && status.minedAt) state = PrivateTxState.OK;\n\n      // ERROR\n      if (\n        status.receivedAt &&\n        status.relayFailure &&\n        status.relayResponses &&\n        Object.values(status.relayResponses).reduceRight((prev, current) => {\n          if (prev) return prev;\n          if (current.error || current.response.error) return true;\n          return false;\n        }, false)\n      )\n        state = PrivateTxState.ERROR;\n\n      // INDETERMINATE\n      if (status.receivedAt && status.relayedAt && status.relayFailure && status.minedAt)\n        state = PrivateTxState.INDETERMINATE;\n\n      // If more than 20 minutes has passed, better to mark this TX as indeterminate\n      if (minutesElapsed > 3) state = PrivateTxState.INDETERMINATE;\n\n      // update new state\n      tx.privateTx.state = state ?? PrivateTxState.UNCHECKED;\n      tx.privateTx.status = status;\n    }),\n);\n","export interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number | string | null;\n  method: string;\n  params?: unknown[] | unknown;\n}\n\n/**\n * @export\n * @interface JsonRpcError\n */\nexport interface JsonRpcError {\n  code: number;\n  message: string;\n  data?: unknown;\n}\n\n/**\n * @export\n * @interface JsonRpcResponse\n * @template T\n */\nexport interface JsonRpcResponse<T> {\n  jsonrpc: '2.0';\n  id?: number | string | null;\n  result?: T;\n  error?: JsonRpcError;\n}\n\n/**\n * @export\n * @interface JsonRpcPayload\n */\nexport interface JsonRpcPayload {\n  jsonrpc: string;\n  method: string;\n  params?: any[];\n  id?: string | number;\n}\n\n/**\n * @export\n * @class HttpJsonRpcError\n * @extends {Error}\n */\nexport class HttpJsonRpcError extends Error {\n  constructor(message: string, public req?: JsonRpcRequest, public res?: Response) {\n    super(message);\n  }\n}\n\n/**\n * @export\n * @template T\n * @param {string} url\n * @param {Partial<JsonRpcRequest>} {\n * @return {(Promise<JsonRpcResponse<JsonRpcError | T>>)}\n */\nexport function fetchJsonRpc<T>(\n  url: string,\n  { jsonrpc = '2.0', id = new Date().getTime(), method = '', params = [] }: Partial<JsonRpcRequest>,\n): Promise<JsonRpcResponse<JsonRpcError | T>> {\n  return fetch(url, {\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST',\n    body: JSON.stringify({ jsonrpc, id, method, params }),\n  }).then((res: Response) => {\n    // handle http errors (anything not 200)\n    if (res.status !== 200) throw new HttpJsonRpcError(res.statusText, { jsonrpc, id, method, params }, res);\n\n    // handle successful response\n    return res.json();\n  });\n}\n\nexport type JsonRpcMethod =\n  | 'eth_accounts'\n  | 'eth_blockNumber'\n  | 'eth_call'\n  | 'eth_chainId'\n  | 'eth_coinbase'\n  | 'eth_estimateGas'\n  | 'eth_gasPrice'\n  | 'eth_getBalance'\n  | 'eth_getBlockByHash'\n  | 'eth_getBlockByNumber'\n  | 'eth_getBlockTransactionCountByHash'\n  | 'eth_getBlockTransactionCountByNumber'\n  | 'eth_getCode'\n  | 'eth_getLogs'\n  | 'eth_getProof'\n  | 'eth_getStorageAt'\n  | 'eth_getTransactionByBlockHashAndIndex'\n  | 'eth_getTransactionByBlockNumberAndIndex'\n  | 'eth_getTransactionByHash'\n  | 'eth_getTransactionCount'\n  | 'eth_getTransactionReceipt'\n  | 'eth_getUncleByBlockHashAndIndex'\n  | 'eth_getUncleByBlockNumberAndIndex'\n  | 'eth_getUncleCountByBlockHash'\n  | 'eth_getUncleCountByBlockNumber'\n  | 'eth_protocolVersion'\n  | 'eth_sendRawTransaction'\n  | 'eth_sendTransaction'\n  | 'eth_sign'\n  | 'eth_signTransaction'\n  | 'eth_signTypedData'\n  | 'eth_syncing';\nexport interface IJsonRpcRequest<TMethod extends JsonRpcMethod, TParams extends Array<unknown>> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly method: TMethod;\n  readonly params: TParams;\n}\nexport interface IJsonRpcSuccess<TResult> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly result: TResult;\n}\nexport interface IJsonRpcError {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly error: {\n    readonly code: number;\n    readonly message: string;\n    readonly data?: unknown;\n  };\n}\nexport type IJsonRpcResponse<T> = IJsonRpcSuccess<T> | IJsonRpcError;\nexport function validateJsonRpcResponse<T>(response: any): response is IJsonRpcResponse<T> {\n  if (\n    response.jsonrpc !== '2.0' ||\n    (typeof response.id !== 'string' && typeof response.id !== 'number' && response.id !== null) ||\n    ('result' in response && 'error' in response) ||\n    (!('result' in response) && !('error' in response)) ||\n    (response.error && typeof response.error.code !== 'number') ||\n    (response.error && typeof response.error.message !== 'string')\n  )\n    throw new Error(`Expected JSON-RPC response, received something else.\\n${JSON.stringify(response)}`);\n  return true;\n}\nexport function isJsonRpcSuccess<T>(response: IJsonRpcResponse<T>): response is IJsonRpcSuccess<T> {\n  return !!(response as IJsonRpcSuccess<T>).result && !(response as IJsonRpcError).error;\n}\nexport function isJsonRpcError<T>(response: IJsonRpcResponse<T>): response is IJsonRpcError {\n  return !!(response as IJsonRpcError).error && !(response as IJsonRpcSuccess<T>).result;\n}\n","// @export BURN_ADDRESS\nexport const BURN_ADDRESS = \"0x000000000000000000000000000000000000dead\";\n","export const AddressZero = '0x0000000000000000000000000000000000000000';\n","export const EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = `\\x19\\x01`;\n","// @note this is also the old OVM_ETH address on Optimism\nexport const DeadAddress = '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000';\n","/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nexport class RpcError<T = undefined> extends Error {\n  readonly code: number;\n  readonly data?: T;\n  readonly internal?: unknown;\n  constructor(\n    /** Number error code */\n    code: number,\n    /** Human-readable string */\n    message: string,\n    /** Low-level error */\n    internal?: unknown,\n    /** Other useful information about error */\n    data?: T,\n  ) {\n    if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.');\n    if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string.');\n    super(message);\n    this.code = code;\n    this.data = data;\n    this.internal = internal;\n  }\n}\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nexport class ProviderRpcError<T = undefined> extends RpcError<T> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(\n    /**\n     * Number error code\n     * @see https://eips.ethereum.org/EIPS/eip-1193#error-standards\n     */\n    code: 4001 | 4100 | 4200 | 4900 | 4901 | 4902,\n    /** Human-readable string */\n    message: string,\n    /** Low-level error */\n    internal?: unknown,\n    /** Other useful information about error */\n    data?: T,\n  ) {\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999))\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    super(code, message, internal, data);\n  }\n}\nexport class AddChainError extends Error {\n  name = 'AddChainError';\n  message = 'Error adding chain';\n}\nexport class ChainNotConfiguredError extends Error {\n  name = 'ChainNotConfigured';\n  message = 'Chain not configured';\n}\nexport class ConnectorAlreadyConnectedError extends Error {\n  name = 'ConnectorAlreadyConnectedError';\n  message = 'Connector already connected';\n}\nexport class ConnectorNotFoundError extends Error {\n  name = 'ConnectorNotFoundError';\n  message = 'Connector not found';\n}\nexport class SwitchChainError extends ProviderRpcError {\n  name = 'SwitchChainError';\n  constructor(error: unknown) {\n    super(4902, 'Error switching chain', error);\n  }\n}\nexport class SwitchChainNotSupportedError extends Error {\n  name = 'SwitchChainNotSupportedError';\n  message = 'Switch chain not supported by connector';\n}\nexport class UserRejectedRequestError extends ProviderRpcError {\n  name = 'UserRejectedRequestError';\n  constructor(error: unknown) {\n    super(4001, 'User rejected request', error);\n  }\n}\n\nexport class ResourceUnavailableError extends RpcError {\n  name = 'ResourceUnavailable';\n\n  constructor(error: unknown) {\n    super(-32002, 'Resource unavailable', error);\n  }\n}\n","import { Provider, TransactionReceipt } from '@ethersproject/providers';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { toUtf8String } from '@ethersproject/strings';\n\nexport type ErrorSignature = {\n  r: string;\n  s: string;\n  yParity: 0 | 1;\n  networkV: bigint;\n};\n\nexport type ErrorAccessList = Array<{ address: string; storageKeys: Array<string> }>;\n\nexport interface ErrorTransaction {\n  type?: number;\n  to?: string;\n  from?: string;\n  nonce?: number;\n  gasLimit?: bigint;\n  gasPrice?: bigint;\n  maxPriorityFeePerGas?: bigint;\n  maxFeePerGas?: bigint;\n  data?: string;\n  value?: bigint;\n  chainId?: bigint;\n  hash?: string;\n  signature?: ErrorSignature;\n  accessList?: ErrorAccessList;\n}\n\nexport interface ErrorFetchRequestWithBody extends ErrorFetchRequest {\n  body: Readonly<Uint8Array>;\n}\n\nexport interface ErrorFetchRequest {\n  url: string;\n  method: string;\n  headers: Readonly<Record<string, string>>;\n  getHeader(key: string): string;\n  body: null | Readonly<Uint8Array>;\n  hasBody(): this is ErrorFetchRequestWithBody;\n}\n\nexport interface ErrorFetchResponseWithBody extends ErrorFetchResponse {\n  body: Readonly<Uint8Array>;\n}\n\nexport interface ErrorFetchResponse {\n  statusCode: number;\n  statusMessage: string;\n  headers: Readonly<Record<string, string>>;\n  getHeader(key: string): string;\n  body: null | Readonly<Uint8Array>;\n  hasBody(): this is ErrorFetchResponseWithBody;\n}\n\n/**\n * @export ErrorCode\n * @summary EthersJs ErrorCode\n */\n// prettier-ignore\nexport type ErrorCode =\n  // Generic Errors\n  | 'UNKNOWN_ERROR'\n  | 'NOT_IMPLEMENTED'\n  | 'UNSUPPORTED_OPERATION'\n  | 'NETWORK_ERROR'\n  | 'SERVER_ERROR'\n  | 'TIMEOUT'\n  | 'BAD_DATA'\n\n  // Operational Errors\n  | 'BUFFER_OVERRUN'\n  | 'NUMERIC_FAULT'\n\n  // Argument Errors\n  | 'INVALID_ARGUMENT'\n  | 'MISSING_ARGUMENT'\n  | 'UNEXPECTED_ARGUMENT'\n  | 'VALUE_MISMATCH'\n\n  // Blockchain Errors\n  | 'CALL_EXCEPTION'\n  | 'INSUFFICIENT_FUNDS'\n  | 'NONCE_EXPIRED'\n  | 'REPLACEMENT_UNDERPRICED'\n  | 'TRANSACTION_REPLACED'\n  | 'UNPREDICTABLE_GAS_LIMIT'\n  | 'UNCONFIGURED_NAME'\n  | 'OFFCHAIN_FAULT';\n\nexport interface EthersError<T extends ErrorCode = ErrorCode> extends Error {\n  code: ErrorCode;\n  //    recover?: (...args: Array<any>) => any;\n  info?: Record<string, any>;\n  error?: Error;\n}\n\n// @note Generic Errors\n\nexport interface UnknownError extends EthersError<'UNKNOWN_ERROR'> {\n  [key: string]: any;\n}\n\nexport interface NotImplementedError extends EthersError<'NOT_IMPLEMENTED'> {\n  operation: string;\n}\n\nexport interface UnsupportedOperationError extends EthersError<'UNSUPPORTED_OPERATION'> {\n  operation: string;\n}\n\nexport interface NetworkError extends EthersError<'NETWORK_ERROR'> {\n  event: string;\n}\n\nexport interface ServerError extends EthersError<'SERVER_ERROR'> {\n  request: ErrorFetchRequest | string;\n  response?: ErrorFetchResponse;\n}\n\nexport interface TimeoutError extends EthersError<'TIMEOUT'> {\n  operation: string;\n  reason: string;\n  request?: ErrorFetchRequest;\n}\n\nexport interface BadDataError extends EthersError<'BAD_DATA'> {\n  value: any;\n}\n\n// @note Operational Errors\n\nexport interface BufferOverrunError extends EthersError<'BUFFER_OVERRUN'> {\n  buffer: Uint8Array;\n  length: number;\n  offset: number;\n}\n\nexport interface NumericFaultError extends EthersError<'NUMERIC_FAULT'> {\n  operation: string;\n  fault: string;\n  value: any;\n}\n\n// Argument Errors\n\nexport interface InvalidArgumentError extends EthersError<'INVALID_ARGUMENT'> {\n  argument: string;\n  value: any;\n  info?: Record<string, any>;\n}\n\nexport interface MissingArgumentError extends EthersError<'MISSING_ARGUMENT'> {\n  count: number;\n  expectedCount: number;\n}\n\nexport interface UnexpectedArgumentError extends EthersError<'UNEXPECTED_ARGUMENT'> {\n  count: number;\n  expectedCount: number;\n}\n\n//export interface ValueMismatchError extends EthersError<ErrorCode.UNEXPECTED_ARGUMENT> {\n//    count: number;\n//    expectedCount: number;\n//}\n\n// Blockchain Errors\n\nexport interface CallExceptionError extends EthersError<'CALL_EXCEPTION'> {\n  // The revert data\n  data: string;\n\n  // The transaction that triggered the exception\n  transaction?: any;\n\n  // The Contract, method and args used during invocation\n  method?: string;\n  signature?: string;\n  args?: ReadonlyArray<any>;\n\n  // The Solidity custom revert error\n  errorSignature?: string;\n  errorName?: string;\n  errorArgs?: ReadonlyArray<any>;\n  reason?: string;\n}\n\n//export interface ContractCallExceptionError extends CallExceptionError {\n// The transaction call\n//    transaction: any;//ErrorTransaction;\n//}\n\nexport interface InsufficientFundsError extends EthersError<'INSUFFICIENT_FUNDS'> {\n  transaction: any; //ErrorTransaction;\n}\n\nexport interface NonceExpiredError extends EthersError<'NONCE_EXPIRED'> {\n  transaction: any; //ErrorTransaction;\n}\n\nexport interface OffchainFaultError extends EthersError<'OFFCHAIN_FAULT'> {\n  transaction?: any;\n  reason: string;\n}\n\nexport interface ReplacementUnderpricedError extends EthersError<'REPLACEMENT_UNDERPRICED'> {\n  transaction: any; //ErrorTransaction;\n}\n\nexport interface TransactionReplacedError extends EthersError<'TRANSACTION_REPLACED'> {\n  cancelled: boolean;\n  reason: 'repriced' | 'cancelled' | 'replaced';\n  hash: string;\n  replacement: any; //TransactionResponse;\n  receipt: any; //TransactionReceipt;\n}\n\nexport interface UnconfiguredNameError extends EthersError<'UNCONFIGURED_NAME'> {\n  value: string;\n}\n\nexport interface UnpredictableGasLimitError extends EthersError<'UNPREDICTABLE_GAS_LIMIT'> {\n  transaction: any; //ErrorTransaction;\n}\n\n// Coding; converts an ErrorCode its Typed Error\n/**\n * @export CodedEthersError\n */\n// prettier-ignore\nexport type CodedEthersError<T> =\n T extends \"UNKNOWN_ERROR\" ? UnknownError:\n T extends \"NOT_IMPLEMENTED\" ? NotImplementedError:\n T extends \"UNSUPPORTED_OPERATION\" ? UnsupportedOperationError:\n T extends \"NETWORK_ERROR\" ? NetworkError:\n T extends \"SERVER_ERROR\" ? ServerError:\n T extends \"TIMEOUT\" ? TimeoutError:\n T extends \"BAD_DATA\" ? BadDataError:\n\n T extends \"BUFFER_OVERRUN\" ? BufferOverrunError:\n T extends \"NUMERIC_FAULT\" ? NumericFaultError:\n\n T extends \"INVALID_ARGUMENT\" ? InvalidArgumentError:\n T extends \"MISSING_ARGUMENT\" ? MissingArgumentError:\n T extends \"UNEXPECTED_ARGUMENT\" ? UnexpectedArgumentError:\n\n T extends \"CALL_EXCEPTION\" ? CallExceptionError:\n T extends \"INSUFFICIENT_FUNDS\" ? InsufficientFundsError:\n T extends \"NONCE_EXPIRED\" ? NonceExpiredError:\n T extends \"OFFCHAIN_FAULT\" ? OffchainFaultError:\n T extends \"REPLACEMENT_UNDERPRICED\" ? ReplacementUnderpricedError:\n T extends \"TRANSACTION_REPLACED\" ? TransactionReplacedError:\n T extends \"UNCONFIGURED_NAME\" ? UnconfiguredNameError:\n T extends \"UNPREDICTABLE_GAS_LIMIT\" ? UnpredictableGasLimitError:\n never;\n\n/**\n * #isError\n * @param error\n * @param code\n * @returns\n */\nexport function isError<K extends ErrorCode, T extends CodedEthersError<K>>(error: any, code: K): error is T {\n  return error && (<EthersError>error).code === code;\n}\n\n/**\n * #isCallException\n * @param error\n * @returns\n */\nexport function isCallException(error: any): error is CallExceptionError {\n  return isError(error, 'CALL_EXCEPTION');\n}\n\n/**\n * #getTransactionError\n * @param tx\n * @param receipt\n * @param provider\n * @returns\n */\nexport const getTransactionError = async (\n  tx: TransactionResponse,\n  receipt: TransactionReceipt,\n  provider: Provider,\n): Promise<string> => {\n  if (typeof tx !== 'object') {\n    throw TypeError(`tx argument ${tx} must be a transaction object`);\n  }\n  if (typeof receipt !== 'object') {\n    throw TypeError(`receipt argument ${receipt} must be a transaction receipt object`);\n  }\n  if (receipt.status) {\n    throw TypeError('Transaction did not fail. Can only read the revert reason from failed transactions');\n  }\n  if (!receipt.transactionHash) {\n    throw TypeError(`There is no transaction hash on the receipt object`);\n  }\n  if (receipt.gasUsed === tx.gasLimit) {\n    throw Error('Transaction failed as it ran out of gas.');\n  }\n\n  // TODO: check type\n  let rawMessageData: string;\n  try {\n    const result = await provider.call(\n      // @ts-expect-error\n      {\n        ...tx,\n      },\n      receipt.blockNumber,\n    );\n\n    // @dev Trim the 0x prefix\n    rawMessageData = result.slice(2);\n  } catch (e) {\n    if (e.message.startsWith('Node error: ')) {\n      // @dev  Trim \"Node error: \"\n      const errorObjectStr = e.message.slice(12);\n      // @dev Parse the error object\n      const errorObject = JSON.parse(errorObjectStr);\n\n      if (!errorObject.data) {\n        throw Error('Failed to parse data field error object:' + errorObjectStr);\n      }\n\n      if (errorObject.data.startsWith('Reverted 0x')) {\n        // Trim \"Reverted 0x\" from the data field\n        rawMessageData = errorObject.data.slice(11);\n      } else if (errorObject.data.startsWith('0x')) {\n        // Trim \"0x\" from the data field\n        rawMessageData = errorObject.data.slice(2);\n      } else {\n        throw Error('Failed to parse data field of error object:' + errorObjectStr);\n      }\n    } else {\n      throw Error('Failed to parse error message from Ethereum call: ' + e.message);\n    }\n  }\n\n  return parseReasonCode(rawMessageData);\n};\n\n/**\n * @export parseReasonCode\n * @param messageData\n * @returns\n */\nexport const parseReasonCode = (messageData: string): string => {\n  // Get the length of the revert reason\n  const strLen = parseInt(messageData.slice(8 + 64, 8 + 128), 16);\n  // Using the length and known offset, extract and convert the revert reason\n  const reasonCodeHex = messageData.slice(8 + 128, 8 + 128 + strLen * 2);\n  // Convert reason from hex to string\n  const reason = toUtf8String('0x' + reasonCodeHex);\n\n  return reason;\n};\n","/** \n@export stderrors\ngithub.com/WalletConnect/walletconnect-utils/blob/master/jsonrpc/utils/src/constants.ts\n*/\nexport const PARSE_ERROR = 'PARSE_ERROR';\nexport const INVALID_REQUEST = 'INVALID_REQUEST';\nexport const METHOD_NOT_FOUND = 'METHOD_NOT_FOUND';\nexport const INVALID_PARAMS = 'INVALID_PARAMS';\nexport const INTERNAL_ERROR = 'INTERNAL_ERROR';\nexport const SERVER_ERROR = 'SERVER_ERROR';\n\nexport const RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];\nexport const SERVER_ERROR_CODE_RANGE = [-32000, -32099];\n\nexport const STANDARD_ERROR_MAP = {\n  [PARSE_ERROR]: { code: -32700, message: 'Parse error' },\n  [INVALID_REQUEST]: { code: -32600, message: 'Invalid Request' },\n  [METHOD_NOT_FOUND]: { code: -32601, message: 'Method not found' },\n  [INVALID_PARAMS]: { code: -32602, message: 'Invalid params' },\n  [INTERNAL_ERROR]: { code: -32603, message: 'Internal error' },\n  [SERVER_ERROR]: { code: -32000, message: 'Server error' },\n};\n"],"names":["E","N","p","o","r","t","n","i","s","e","a","m","h","f","u","v","C","R","x","d","_"],"mappings":"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"}