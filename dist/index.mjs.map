{"version":3,"file":"index.mjs","sources":["../src/Interface/JsonRpc/index.ts","../src/JsonRpc/index.ts","../src/SecureRpc/ChainId.ts","../src/SecureRpc/OpenMevState.ts","../src/SecureRpc/actions.ts","../src/SecureRpc/privateTransaction.ts"],"sourcesContent":["/**\n *\n * @package InterfaceJsonRpc\n * @since 2022.03\n * @version 01.0\n *\n */\n\n/* prettier-ignore */\nexport type JsonRpcMethod = 'eth_accounts' | 'eth_blockNumber' | 'eth_call' | 'eth_chainId' | 'eth_coinbase' | 'eth_estimateGas' | 'eth_gasPrice' | 'eth_getBalance' | 'eth_getBlockByHash' | 'eth_getBlockByNumber' | 'eth_getBlockTransactionCountByHash' | 'eth_getBlockTransactionCountByNumber' | 'eth_getCode' | 'eth_getLogs' | 'eth_getProof' | 'eth_getStorageAt' | 'eth_getTransactionByBlockHashAndIndex' | 'eth_getTransactionByBlockNumberAndIndex' | 'eth_getTransactionByHash' | 'eth_getTransactionCount' | 'eth_getTransactionReceipt' | 'eth_getUncleByBlockHashAndIndex' | 'eth_getUncleByBlockNumberAndIndex' | 'eth_getUncleCountByBlockHash' | 'eth_getUncleCountByBlockNumber' | 'eth_protocolVersion' | 'eth_sendRawTransaction' | 'eth_sendTransaction' | 'eth_sign' | 'eth_signTransaction' | 'eth_signTypedData' | 'eth_syncing'\n\n/**\n *\n * @export\n * @interface IJsonRpcRequest\n * @template TMethod\n * @template TParams\n */\nexport interface IJsonRpcRequest<TMethod extends JsonRpcMethod, TParams extends Array<unknown>> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly method: TMethod;\n  readonly params: TParams;\n}\n\n/**\n *\n *\n * @export\n * @interface IJsonRpcSuccess\n * @template TResult\n */\nexport interface IJsonRpcSuccess<TResult> {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly result: TResult;\n}\n\n/**\n *\n *\n * @export\n * @interface IJsonRpcError\n */\nexport interface IJsonRpcError {\n  readonly jsonrpc: '2.0';\n  readonly id: string | number | null;\n  readonly error: {\n    readonly code: number;\n    readonly message: string;\n    readonly data?: unknown;\n  };\n}\n\nexport type IJsonRpcResponse<T> = IJsonRpcSuccess<T> | IJsonRpcError;\nexport function validateJsonRpcResponse<T>(response: any): response is IJsonRpcResponse<T> {\n  if (\n    response.jsonrpc !== '2.0' ||\n    (typeof response.id !== 'string' && typeof response.id !== 'number' && response.id !== null) ||\n    ('result' in response && 'error' in response) ||\n    (!('result' in response) && !('error' in response)) ||\n    (response.error && typeof response.error.code !== 'number') ||\n    (response.error && typeof response.error.message !== 'string')\n  )\n    throw new Error(`Expected JSON-RPC response, received something else.\\n${JSON.stringify(response)}`);\n  return true;\n}\n\n/**\n *\n *\n * @export\n * @template T\n * @param {IJsonRpcResponse<T>} response\n * @return {response is IJsonRpcSuccess<T>}\n */\nexport function isJsonRpcSuccess<T>(response: IJsonRpcResponse<T>): response is IJsonRpcSuccess<T> {\n  return !!(response as IJsonRpcSuccess<T>).result && !(response as IJsonRpcError).error;\n}\n\n/**\n *\n *\n * @export\n * @template T\n * @param {IJsonRpcResponse<T>} response\n * @return {response is IJsonRpcError}\n */\n\nexport function isJsonRpcError<T>(response: IJsonRpcResponse<T>): response is IJsonRpcError {\n  return !!(response as IJsonRpcError).error && !(response as IJsonRpcSuccess<T>).result;\n}\n","/**\n * @file index.ts\n * @version 0.1.0\n * @license Apache-2.0\n *\n */\n\n/**\n *\n * JsonRpcRequest\n * @export\n * @interface JsonRpcRequest\n */\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number | string | null;\n  method: string;\n  params?: unknown[] | unknown;\n}\n\n/**\n *\n *\n * @export\n * @interface JsonRpcError\n */\nexport interface JsonRpcError {\n  code: number;\n  message: string;\n  data?: unknown;\n}\n/**\n *\n *\n * @export\n * @interface JsonRpcResponse\n * @template T\n */\nexport interface JsonRpcResponse<T> {\n  jsonrpc: '2.0';\n  id?: number | string | null;\n  result?: T;\n  error?: JsonRpcError;\n}\n/**\n *\n *\n * @export\n * @class HttpJsonRpcError\n * @extends {Error}\n */\nexport class HttpJsonRpcError extends Error {\n  constructor(message: string, public req?: JsonRpcRequest, public res?: Response) {\n    super(message);\n  }\n}\n/**\n *\n *\n * @export\n * @template T\n * @param {string} url\n * @param {Partial<JsonRpcRequest>} {\n *     jsonrpc = '2.0',\n *     id = new Date().getTime(),\n *     method = '',\n *     params = [],\n *   }\n * @return {(Promise<JsonRpcResponse<JsonRpcError | T>>)}\n */\nexport function fetchJsonRpc<T>(\n  url: string,\n  { jsonrpc = '2.0', id = new Date().getTime(), method = '', params = [] }: Partial<JsonRpcRequest>,\n): Promise<JsonRpcResponse<JsonRpcError | T>> {\n  return fetch(url, {\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST',\n    body: JSON.stringify({ jsonrpc, id, method, params }),\n  }).then((res: Response) => {\n    // handle http errors (anything not 200)\n    if (res.status !== 200) throw new HttpJsonRpcError(res.statusText, { jsonrpc, id, method, params }, res);\n\n    // handle successful response\n    return res.json();\n  });\n}\n","/** @export ChainId */\nexport enum ChainId {\n  MAINNET = '1',\n}\n","import { JsonRpcResponse } from '../JsonRpc';\n\n/**\n *   @enum PrivateTxState\n  *  @interface PrivateTxStatus\n  *  @interface RelayResponse\n  *  @description Transaction State Types\n *\n * - UNCHECKED -> Tx status has not been checked and there's no information about it.\n * - PROCESSING -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n * - OK -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n * - INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n * - ERROR -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n *\n/**\n * \n *\n * @export\n * @enum {number}\n */\nexport enum PrivateTxState {\n  UNCHECKED = 'UNCHECKED',\n  PROCESSING = 'PROCESSING',\n  OK = 'OK',\n  INDETERMINATE = 'INDETERMINATE',\n  ERROR = 'ERROR',\n}\n\n/** @type RelayResponses  */\nexport type RelayResponses = Record<string, RelayResponse>;\n\n/**\n *\n * @export\n * @interface RelayResponse\n */\nexport interface RelayResponse {\n  response: JsonRpcResponse<any>;\n  error?: string;\n}\n\n/**\n *\n * @export\n * @interface PrivateTxStatus\n */\nexport interface PrivateTxStatus {\n  transactionHash: string;\n  receivedAt: string;\n  relayedAt?: string;\n  minedAt?: string;\n  relayFailure?: boolean;\n  relayResponses?: RelayResponses;\n}\n/**\n *\n *\n * @export\n * @param {*} privateTx\n * @return {*}\n */\nexport function privateTx(privateTx: any): any {\n  throw new Error('[#sushiguard]: Function Error.');\n}\n","/**\n * @filename actions \n * @version 0.1.0\n * \n */\n import { createAction } from '@reduxjs/toolkit'\n\n import { PrivateTxState, PrivateTxStatus } from './OpenMevState';\n \n import { ChainId } from './ChainId';\n \n /**\n  * \n  *\n  * @export\n  * @interface SerializableTransactionReceipt\n  */\n export interface SerializableTransactionReceipt {\n     to: string\n     from: string\n     contractAddress: string\n     transactionIndex: number\n     blockHash: string\n     transactionHash: string\n     blockNumber: number\n     status?: number\n   }\n \n \n export const addTransaction = createAction<{\n     chainId: ChainId\n     hash: string\n     from: string\n     approval?: { tokenAddress: string; spender: string }\n     claim?: { recipient: string }\n     summary?: string\n   }>('transactions/addTransaction')\n   export const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\n   export const finalizeTransaction = createAction<{\n     chainId: ChainId\n     hash: string\n     receipt: SerializableTransactionReceipt\n   }>('transactions/finalizeTransaction')\n   export const checkedTransaction = createAction<{\n     chainId: ChainId\n     hash: string\n     blockNumber: number\n   }>('transactions/checkedTransaction')\n   export const updatePrivateTxStatus = createAction<{\n     chainId: ChainId\n     hash: string\n     status: PrivateTxStatus\n   }>('transactions/updatePrivateTxStatus')\n   \n /**\n  * \n  *\n  * @export\n  * @interface TransactionDetails\n  */\n export interface TransactionDetails {\n   hash: string\n   approval?: { tokenAddress: string; spender: string }\n   summary?: string\n   claim?: { recipient: string }\n   receipt?: SerializableTransactionReceipt\n   lastCheckedBlockNumber?: number\n   addedTime: number\n   confirmedTime?: number\n   from: string\n   privateTx?: {\n     state: PrivateTxState\n     status?: PrivateTxStatus\n   }\n }\n ","/**\n *\n * @class PrivateTransaction\n * @license GPL-3.0-Only\n * @see {@link https://docs.manifoldfinance.com}\n * @since 2022.03\n * @version 0.1.0\n *\n */\n\nimport { PrivateTxState } from './OpenMevState';\nimport { TransactionDetails } from './reducer';\n\n/**\n * @summary\n * Basic explanation of the tx state types:\n * UNCHECKED -> Tx status has not been checked and there's no information about it.\n * PROCESSING -> Tx checks are in place until a resolution happens: OK, INDETERMINATE, ERROR.\n * OK -> Relay received the Tx && all downstream miners accepted without complains && tx mined successfully\n * INDETERMINATE -> Relay received correctly the Tx && at least one miner accepted the TX && TX potentially mineable\n * ERROR -> Relay haven't received the TX || none of the miners accepted the Tx || Tx was not mined successfully\n */\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxPending(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return !tx?.receipt;\n  return tx?.privateTx?.state === PrivateTxState.UNCHECKED || tx?.privateTx?.state === PrivateTxState.PROCESSING;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxSuccessful(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return !!tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined');\n  return (\n    tx?.privateTx?.state === PrivateTxState.OK &&\n    !!tx &&\n    (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n  );\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxIndeterminate(tx?: TransactionDetails): boolean {\n  if (!tx?.privateTx) return false;\n  return tx?.privateTx?.state === PrivateTxState.INDETERMINATE;\n}\n\n/**\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {number}\n */\nexport function txMinutesPending(tx?: TransactionDetails): number {\n  if (!tx) return 0;\n  return (new Date().getTime() - tx.addedTime) / 1000 / 60;\n}\n\n/**\n *\n *\n * @export\n * @param {TransactionDetails} [tx]\n * @return {boolean}\n */\nexport function isTxExpired(tx?: TransactionDetails): boolean {\n  if (!tx) return false;\n  return txMinutesPending(tx) > 60;\n}\n"],"names":[],"mappings":"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"}